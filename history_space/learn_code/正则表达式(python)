# 正则表达式 Python
正则表达式是一种用来匹配字符串的强有力的武器。
它的设计思想是用一种描述性的语言来给字符串定义一个规则，
凡是符合规则的字符串，我们就认为它“匹配”了，否则，该字符串就是不合法的。

## 判断一个字符串是否是合法的Email的方法是：
1.创建一个匹配Email的正则表达式；
2.用该正则表达式去匹配用户的输入来判断是否合法。

## 正则表达式的字符
1.  \d 可以匹配一个数字
2.  \w 可以匹配一个字母或数字
3.  .  可以匹配任意字符
4.  *  表示任意个字符（包括0个）
5.  +  表示至少一个字符
6.  ?  表示0个或1个字符
7.  {n}   表示n个字符
8.  {n,m} 表示n至m个字符
9.  \s 可以匹配一个空格（也包括Tab等空白符）
10. \s+ 表示至少有一个空格
11. \ 转义,'-'是特殊字符
12. [0-9a-zA-Z\_] 可以匹配一个数字、字母或者下划线；
13. [0-9a-zA-Z\_]+ 可以匹配至少由一个数字、字母或者下划线组成的字符串，比如'a100'，'0_Z'，'Py3000'等等；
14. [a-zA-Z\_][0-9a-zA-Z\_]* 可以匹配由字母或下划线开头，后接任意个由一个数字、字母或者下划线组成的字符串，也就是Python合法的变量；
15. [a-zA-Z\_][0-9a-zA-Z\_]{0, 19} 更精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符）。
16. A|B 可以匹配A或B，所以(P|p)ython可以匹配'Python'或者'python'。
17. ^ 表示行的开头，^\d 表示必须以数字开头。
18. $ 表示行的结束，\d$ 表示必须以数字结束。

## re模块
import re
Python提供re模块，包含所有正则表达式的功能。如何判断正则表达式是否匹配：
IN：  re.match(r'^\d{3}\-\d{3,8}$', '010-12345')
OUT： <_sre.SRE_Match object; span=(0, 9), match='010-12345'>
IN：  re.match(r'^\d{3}\-\d{3,8}$', '010 12345')
match()方法判断是否匹配，如果匹配成功，返回一个Match对象，否则返回None。

## 切分字符串
用正则表达式切分字符串比用固定的字符更灵活.
...
'a b   c'.split(' ')
re.split(r'\s+','a b   c')
re.split(r'[\s+\,]+','a,,,, b  ,,,     c')
...

## 分组
正则表达式有提取子串的强大功能,用()表示的就是要提取的分组（Group）.
m = re.match(r'^(\d{3})-(\d{3,8})$', '010-12345')
m.group(0)
m.group(1)
m.group(2)
m = re.match(r'^(0[0-9]|1[0-9]|2[0-3]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])
             \:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])$', t)

## 贪婪匹配
正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符。
re.match(r'^(\d+)(0*)$', '102300').groups()
由于\d+采用贪婪匹配，直接把后面的0全部匹配了，结果0*只能匹配空字符串了。
必须让\d+采用非贪婪匹配（也就是尽可能少匹配），才能把后面的0匹配出来，加个?  就可以让\d+采用非贪婪匹配.
re.match(r'^(\d+?)(0*)$', '102300').groups()

## 编译
当我们在Python中使用正则表达式时，re模块内部会干两件事情：
1.编译正则表达式，如果正则表达式的字符串本身不合法，会报错；
2.用编译后的正则表达式去匹配字符串。
如果一个正则表达式要重复使用几千次，出于效率的考虑，我们可以预编译该正则表达式，接下来重复使用时就不需要编译这个步骤了，直接匹配.
...
import re
re_telephone = re.compile(r'^(\d{3})-(\d{3,8})$')     # 编译
re_telephone.match('010-12345').groups()              # 使用
...
编译后生成Regular Expression对象，由于该对象自己包含了正则表达式，所以调用对应的方法时不用给出正则字符串。

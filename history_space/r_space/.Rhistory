setDataRange(calculable=TRUE, splitNumber=0, labels=c('Big','Small'),
color=c('red', 'yellow', 'green'), valueRange=c(0, 2.5))
# 4 其他设定Futher Setup
# 接下来可以配置控件、添加标注点/标注线，以及美化成图。
# 4.1 标注线和标注点addMarkLine And addMarkPoint
# 可以拟合一条回归曲线，并定义标注线的两个点。
lm <- with(iris, lm(Petal.Width~Sepal.Width))
pred <- predict(lm, data.frame(Sepal.Width=c(2, 4.5)))
pred
echartr(iris, Sepal.Width, Petal.Width, Species) %>%
addML(series=1, data=data.frame(name1='Max', type='max')) %>%
addML(series=2, data=data.frame(name1='Mean', type='average')) %>%
addML(series=3, data=data.frame(name1='Min', type='min')) %>%
addMP(series=2, data=data.frame(name='Max', type='max')) %>%
addML(series='Linear Reg', data=data.frame(
name1='Reg', value=lm$coefficients[2],
xAxis1=2, yAxis1=pred[1], xAxis2=4.5, yAxis2=pred[2]))
data <- data.frame(
name1=c('Max', 'Mean', 'Min'), type=c('max', 'average', 'min'),
series=levels(iris$Species))
data
echartr(iris, Sepal.Width, Petal.Width, Species) %>%
addML(series=1:3, data=data) %>%
addMP(series=2, data=data.frame(name='Max', type='max')) %>%
addML(series='Linear Reg', data=data.frame(
name1='Reg', value=lm$coefficients[2],
xAxis1=2, yAxis1=pred[1], xAxis2=4.5, yAxis2=pred[2]))
echartr(iris, Sepal.Width, Petal.Width, Species) %>%
addML(series=1, data=data.frame(name1='Max', type='max')) %>%
addML(series=2, data=data.frame(name1='Mean', type='average')) %>%
addML(series=3, data=data.frame(name1='Min', type='min')) %>%
addMP(series=2, data=data.frame(name='Max', type='max')) %>%
addML(series='Linear Reg', data=data.frame(
name1='Reg', value=lm$coefficients[2],
xAxis1=2, yAxis1=pred[1], xAxis2=4.5, yAxis2=pred[2]))
echartr(iris, Sepal.Width, Petal.Width, Species) %>%
addML(series=1, data=data.frame(name1='Max', type='max')) %>%
addML(series=2, data=data.frame(name1='Mean', type='average')) %>%
addML(series=3, data=data.frame(name1='Min', type='min')) %>%
addMP(series=2, data=data.frame(name='Max', type='max'))
echartr(iris, Sepal.Width, Petal.Width, Species) %>%
addML(series=1, data=data.frame(name1='Max', type='max')) %>%
addML(series=2, data=data.frame(name1='Mean', type='average')) %>%
addML(series=3, data=data.frame(name1='Min', type='min'))
echartr(iris, Sepal.Width, Petal.Width, Species) %>%
addML(series=1:3, data=data)
echartr(iris, Sepal.Width, Petal.Width, Species) %>%
addML(series=1:3, data=data) %>%
addMP(series=2, data=data.frame(name='Max', type='max')) %>%
addML(series='Linear Reg', data=data.frame(
name1='Reg', value=lm$coefficients[2],
xAxis1=2, yAxis1=pred[1], xAxis2=4.5, yAxis2=pred[2]))
# 3 举例Showcase
# 3.1 数据准备Data Preparation
# 让我们看一下datasets包自带的Titanic数据集。不同舱位的生存人数如下:
titanic <- data.table::melt(apply(Titanic, c(1,4), sum))
names(titanic) <- c('Class', 'Survived', 'Count')
knitr::kable(titanic)
# 3.2 条图Horizontal Bar Chart
# 3.2.1 单个数据系列Singular Series
# type可以是’hbar’、‘bar’或’auto’。
echartr(titanic[titanic$Survived=='Yes',], Class, Count) %>%
setTitle('Titanic: N Survival by Cabin Class')
echartr(titanic, Class, Count, Survived) %>%
setTitle('Titanic: Survival Outcome by Cabin Class')
# 3.2.3 堆积条图Stacked Horizontal Bar Chart
# 相比于hbar，你需要设置subtype为’stack’。
# 单系列和多系列堆积条图的实现语法和普通条图类似。
echartr(titanic, Class, Count, Survived, type='hbar', subtype='stack') %>%
setTitle('Titanic: Survival Outcome by Cabin Class')
# 3.2.4 龙卷风图Tornado Chart
# 龙卷风图是条图的特例。关键是：
# 提供一个全正值变量，和一个全负值变量
# 平铺，不要堆积
titanic_tc <- titanic
titanic_tc$Count[titanic_tc$Survived=='No'] <-
- titanic_tc$Count[titanic_tc$Survived=='No']
g <- echartr(titanic_tc, Class, Count, Survived, type='hbar') %>%
setTitle("Titanic: Survival Outcome by Cabin Class")
g
echartr(titanic_tc, Class, Count, Survived, type='hbar') %>%
setTitle("Titanic: Survival Outcome by Cabin Class")
titanic_tc$Count[titanic_tc$Survived=='No'] <- - titanic_tc$Count[titanic_tc$Survived=='No']
echartr(titanic_tc, Class, Count, Survived, type='hbar') %>%
setTitle("Titanic: Survival Outcome by Cabin Class")
g =echartr(titanic_tc, Class, Count, Survived, type='hbar') %>%
setTitle("Titanic: Survival Outcome by Cabin Class")
g
# 3.2.4 龙卷风图Tornado Chart
# 龙卷风图是条图的特例。关键是：
# 提供一个全正值变量，和一个全负值变量
# 平铺，不要堆积
titanic_tc <- titanic
titanic_tc$Count[titanic_tc$Survived=='No'] <- -titanic_tc$Count[titanic_tc$Survived=='No']
g =echartr(titanic_tc, Class, Count, Survived, type='hbar') %>%
setTitle("Titanic: Survival Outcome by Cabin Class")
g
# 当然，我们还得微调一下坐标轴。Y轴应该和x轴交会于零点，
# 且x轴标签都要取绝对值 (略有点复杂，需要懂一点JaveScript)。
g %>% setYAxis(axisLine=list(onZero=TRUE)) %>%
setXAxis(axisLabel=list(
formatter=JS('function (value) {return Math.abs(value);}')
))
# 3.2.5 人口学金字塔Population Pyramid
# 如果设type为’hbar’，subtype为’stack’，就得到了社会学中常用的人口学金字塔。
echartr(titanic_tc, Class, Count, Survived, type='hbar', subtype='stack') %>%
setTitle("Titanic: Survival Outcome by Cabin Class") %>%
setYAxis(axisLine=list(onZero=TRUE)) %>%
setXAxis(axisLabel=list(
formatter=JS('function (value) {return Math.abs(value);}')
))
# 3.2.6 带时间轴的条图Bar Chart with Timeline
# 需要一个时间轴变量。不妨用’sex’变量。
titanic_sex <- data.table::melt(apply(Titanic, c(1,2,4), sum))
names(titanic_sex)[4] <- "Count"
knitr::kable(titanic_sex)
echartr(titanic_sex, Class, Count, Survived, t=Sex, type='bar') %>%
setTitle("Titanic: Survival Outcome by Cabin Class Across Sex")
# 3.3 柱图Vertical Bar (Column) Chart
# 3.3.1 平铺柱图Tiled Vertical Bar (Column) Chart
# 相比于hbar，需要设type为’vbar’或’column’。
# 单系列或多系列柱图的实现语法和普通条图类似。
echartr(titanic, Class, Count, Survived, type='column') %>%
setTitle('Titanic: Survival Outcome by Cabin Class')
# 3.3.2 堆积柱图Stacked Vertical Bar (Column) Chart
# 相比于vbar，需要设subtype为’stack’。
# 单系列或多系列柱图的实现语法和普通条图类似。
echartr(titanic, Class, Count, Survived, type='column', subtype='stack') %>%
setTitle('Titanic: Survival Outcome by Cabin Class')
# 3.4 直方图Histogram
# 3.4.1 按频数统计Stat by Frequency
# 直方图是柱图的特例，只需要提供一个数值型x变量。
# type可以是’histogram’、‘hist’。setTooltip(formatter='none'调用默认的tooltip模板。
# Echarts2无法自适应设定barWidth，所以你需要自己设定一个合理的数值。
echartr(iris, Sepal.Width, width=600) %>%
setTitle('Iris: Histogram of Sepal.Width') %>%
setTooltip(formatter='none') %>%
setSeries(1, barWidth=500/13)
# 3.4.2 按密度统计Stat by Density
# 有时需要一幅密度直方图，那么设subtype为’density’。
echartr(iris, Sepal.Width, type='hist', subtype='density', width=600) %>%
setTitle('Iris: Histogram of Sepal.Width') %>% setYAxis(name="Density") %>%
setTooltip(formatter='none') %>% setSeries(1, barWidth=500/13)
# 基础图类Basic Plots 03 - 线图Line/面积图Area
# 首先，加载recharts:
library(recharts)
# 3 举例Showcase
# 3.1 数据准备Data Preparation
# 让我们使用datasets包自带数据集airquality。数据结构如下：
aq <- airquality
aq$Date <- as.Date(paste('1973', aq$Month, aq$Day, sep='-'))
aq$Day <- as.character(aq$Day)
aq$Month <- factor(aq$Month, labels=c("May", "Jun", "Jul", "Aug", "Sep"))
head(aq)
# 3.2 线图Line Chart
# 3.2.1 单个数据系列Singular Series
# type设为’line’。
echartr(aq, Date, Temp, type='line') %>%
setTitle('NY Temperature May - Sep 1973') %>% setSymbols('none')
# 3.2.2 多个数据系列Multiple Series
echartr(aq, Day, Temp, Month, type='line') %>%
setTitle('NY Temperature May - Sep 1973, by Month') %>%
setSymbols('emptycircle')
# 3.2.3 堆积线图Stacked Line Chart
# 设type为’line’，subtype为’stack’。
echartr(aq, Day, Temp, Month, type='line', subtype='stack') %>%
setTitle('NY Temperature May - Sep 1973, by Month') %>%
setSymbols('emptycircle')
# 3.2.4 权重变量映射线宽Line Width Mapped to Weight
# 把线宽和各系列(Month)风速均值关联起来。
echartr(aq, Day, Temp, Month, weight=Wind, type='line') %>%
setTitle('NY Temperature May - Sep 1973, by Month') %>%
setSymbols('emptycircle')
# 3.2.4 权重变量映射线宽Line Width Mapped to Weight
# 把线宽和各系列(Month)风速均值关联起来。
echartr(aq, Day, Temp, Month, weight=Wind, type='line') %>%
setTitle('NY Temperature May - Sep 1973, by Month')
# 3.2.5 带时间轴的线图Line Chart with Timeline
echartr(aq, Day, Temp, t=Month, type='line') %>%
setTitle('NY Temperature May - Sep 1973, by Month') %>%
setSymbols('emptycircle')
# 3.3 平滑线图Curve (Smooth Line) Chart
# 3.3.1 平铺平滑线图Tiled Smooth Line Chart
# 设type为’curve’。
echartr(aq, Day, Temp, Month, type='curve') %>%
setTitle('NY Temperature May - Sep 1973, by Month') %>%
setSymbols('emptycircle')
# 3.3.2 堆积平滑线图Stacked Smooth Line Chart
# 设type为’curve’，subtype为’stack’。
echartr(aq, Day, Temp, Month, type='curve', subtype='stack') %>%
setTitle('NY Temperature May - Sep 1973, by Month') %>%
setSymbols('emptycircle')
# 3.4 面积图Area Chart
# 3.4.1 平铺面积图Tiled Area Chart
# 面积图实际上和线图是一回事，唯一不同之处是前者设定了areaStyle特性。
# 设type为’area’。
echartr(aq, Date, Temp, type='area') %>%
setTitle('NY Temperature May - Sep 1973') %>%
setSymbols('emptycircle')
# 3.4.2 堆积面积图Stacked Area Chart
# 设type为’area’，subtype为’stack’。
echartr(aq, Day, Temp, Month, type='area', subtype='stack') %>%
setTitle('NY Temperature May - Sep 1973, by Month') %>%
setSymbols('emptycircle')
# 3.5 平滑面积图Wave (Smooth Area) Chart
# 3.5.1 平铺平滑面积图Tiled Smooth Area Chart
# 设type为’wave’。
echartr(aq, Date, Temp, type='wave') %>%
setTitle('NY Temperature May - Sep 1973') %>%
setSymbols('emptycircle')
# 3.5.2 堆积平滑面积图Stacked Smooth Area Chart
# 设type为’wave’，subtype为’stack’。
echartr(aq, Day, Temp, Month, type='wave', subtype='stack') %>%
setTitle('NY Temperature May - Sep 1973, by Month') %>%
setSymbols('emptycircle')
# 基础图类Basic Plots 04 - 蜡烛图Candlestick
# 首先，加载recharts:
library(recharts)
# 3 举例Showcase
# 3.1 基本图形Basic Plot
echartr(stock, as.character(date), c(open, close, low, high), type='k') %>%
setXAxis(name='Date', axisLabel=list(rotate=30)) %>%
setYAxis(name="Price")
# 3.2 带时间轴With Timeline
# 还记得快速入门中的特别注意事项吗？我们要修补一下数据，
# 让它包含x和t各自所有水平的完整组合。
stock$Month <- format(stock$date, '%m')
stock$Day <- format(stock$date, '%d')
fullData <- data.frame(expand.grid(unique(stock$Month), unique(stock$Day)))
names(fullData) <- c("Month", "Day")
stock <- merge(stock, fullData, all.y=TRUE)
stock
View(stock)
echartr(stock, Day, c(open, close, low, high), t=Month, type='k') %>%
setYAxis(name="Price")
# 3 举例Showcase
# 3.1 基础图形Basic Plot
data(events)
events$link <- 'www.baidu.com'
events$img <- 'inst/favicon.png'
events$title <- paste(rownames(events), events$event)
echartr(events, c(time, event, title, link, img), c(value, weight), series,
type='eventRiver') %>%
setTitle('Event River', 'Ficticious Data') %>% setXAxis(name='Time') %>%
setGrid(y2=80)
View(stock)
View(events)
# 基础图类Basic Plots 14 - 力导向布局图Force Chart
# 首先，加载recharts:
library(recharts)
# 3 举例Showcase
# 3.1 数据准备Data Preparation
# 3.1.1 矩阵模式Matrix Mode
grpmtx <- matrix(c(11975, 5871, 8916, 2868, 1951, 10048, 2060, 6171, 8010, 16145,
8090, 8045, 1013, 990, 940, 6907), byrow=TRUE, nrow=4)
grpmtx <- as.data.frame(grpmtx)
View(grpmtx)
names(grpmtx) <- paste0('Group', 1:4)
View(grpmtx)
grpmtx$Name <- paste0('Group', 1:4)
View(grpmtx)
knitr::kable(grpmtx, align=c('lllll'))
# 3.1.2 节点Node/联结link模式
str(yuNetwork)
# 3.1.2 节点Node/联结link模式
head(yuNetwork)
# yuNetwork数据集包含一个节点数据框(nodes)及一个联结数据框(links)。可以合并为一个数据框。
# nodes节点:name: 节点名称,series: 节点所属数据系列,value: 节点的重要性分值
# links联结:source和target: 定义了联结的方向,relation: 联结的名称,weight: 联结的重要性分值
nodes <- cbind(yuNetwork$nodes[,1], NA, yuNetwork$nodes[,2:3],
stringsAsFactors=FALSE)
names(nodes) <- names(yuNetwork$links)
yu <- rbind(yuNetwork$links, nodes, stringsAsFactors=FALSE)
View(nodes)
View(yu)
View(yu)
# 3.2 力导向布局图Force Chart
# 3.2.1 曲线联结Force with Curve
# 设type为’force’。
echartr(yu, c(source, target), weight, relation, type='force') %>%
setTitle("Yu Family of Shaoxing") %>% setTheme(palette=c(
'tan3','green3','green2','lawngreen','olivedrab1'))
View(grpmtx)
# 3.2.2 直线联结Force with Line
# 3.2.2.1 矩阵模式Matrix Mode
echartr(grpmtx, Name, c(Group1, Group2, Group3, Group4), type='force_line') %>%
setTitle('Test Data', 'Force with ribbon')
# 3.2.2.2 节点Node/联结link模式
# 设type为’force_line’。
echartr(yu, c(source, target), weight, relation, type='force_line') %>%
setTitle("Yu Family of Shaoxing") %>% setTheme(palette=c(
'tan3','green3','green2','lawngreen','olivedrab1'))
# 3.2.3 带时间轴的力导向布局图Force with Timeline
#用year列作为时间轴。
echartr(deutsch, c(club, player), weight, role, t=year,
type='force', sub='arrow') %>%
setTitle('Club Orientation of Deutsch Soccer Team')
# 3 举例Showcase
# 3.1 数据准备Data Preparation
# 3.1.1 矩阵模式Matrix Mode
grpmtx <- matrix(c(11975, 5871, 8916, 2868, 1951, 10048, 2060, 6171, 8010, 16145,
8090, 8045, 1013, 990, 940, 6907), byrow=TRUE, nrow=4)
grpmtx <- as.data.frame(grpmtx)
names(grpmtx) <- paste0('Group', 1:4)
grpmtx$Name <- paste0('Group', 1:4)
knitr::kable(grpmtx, align=c('lllll'))
# 3.1.2 节点Node/联结link模式
knitr::kable(deutsch[deutsch$year==2014,])
# 3.2 和弦图Chord Chart
# 3.2.1 带缎带的和弦图Chord with Ribbon
# 设type为’chord’，subtype为’ribbon’。
echartr(grpmtx, Name, c(Group1, Group2, Group3, Group4),
type='chord', subtype='ribbon + asc + descsub + hidelab + scaletext') %>%
setTitle('Test Data','From d3.js')
View(grpmtx)
Name
c(Group1, Group2, Group3, Group4)
View(grpmtx)
# 3.2.2 无缎带的和弦图Chord without Ribbon
# 3.2.2.1 单向联结One-direction Relationship
# 设type为’chord’。如果数据结构不包括双向联结，不论是否设置subtype为’ribbon’，都无法显示缎带和弦图。
echartr(deutsch[deutsch$year==2014,], c(club, player), weight, role, type='chord',
sub='asc + descsub + rotatelab') %>%
setTitle('Club Orientation of Deutsch Soccer Team (2014)')
deutsch
# 3.2.2.2 双向联结Dual-direction Relationship
# 如果要显示缎带和弦图，必须将源数据修改为双向联结。
# 现在，deutsch14只有单向联结，这意味着，它只定义了Gotze->Bayern的关系，而没有定义反向的Bayern->Gotze。
knitr::kable(with(deutsch[deutsch$year==2014,], table(player, club)))
# 我们需要复制source和target列以构建一个矩阵。
deutsch14 <- deutsch[deutsch$year==2014,]
deutsch14 <- rbind(deutsch14, deutsch14)
deutsch14[14:26, c('player', 'club')] <- recharts:::exchange(
deutsch14[14:26, 'player'], deutsch14[14:26, 'club'])
knitr::kable(with(deutsch14, table(player, club)))
# 这样，设置subtype为’ribbon’，就能获得缎带和弦图了。
echartr(deutsch14, c(club, player), weight, role, type='chord',
sub='asc + descsub + rotatelab + ribbon') %>%
setTitle('Club Orientation of Deutsch Soccer Team (2014)')
# 另一个例子基于预置的数据集mideast。
mideast <- as.data.frame(mideast, col.names=mideast[1,], stringsAsFactors=FALSE)
names(mideast) <- mideast[1,]
mideast <- mideast[2:16,]
me <- data.table::melt(mideast, id=NA)
me <- me[!is.na(me$value),]
me$series <- strsplit(me$value, '/')
me$value <- sapply(me$series, function(x) as.numeric(x[2]))
me$series <- sapply(me$series, function(x) x[1])
names(me) <- c('source', 'target', 'value', 'series')
str(me)
echartr(me, c(source, target), value, series, type='chord', sub='ribbon')
# 3.2.3 带时间轴的和弦图Chord with Timeline
# 用year列作为时间轴。
echartr(deutsch, c(club, player), weight, role, t=year, type='chord',
sub='asc + descsub + rotatelab') %>%
setTimeline(show=FALSE, autoPlay=TRUE) %>%
setTitle('Club Orientation of Deutsch Soccer Team')
# 2 用法Function Call
# echartr(data=数据框, x=（文本型自变量，其他类型会被转为因子。如提供多个变量，只传入第一个。）,
#         y=c(数值型应变量。如提供多个变量，只传入第一个。),
#         series=数据系列变量,<t>=时间轴变量, <type>=wordCloud)
# 3 举例Showcase
# 3.1 数据准备Data Preparation
# 从百度热词榜获取热词，并解析为数据框，包含热词和频数。
# 为此构建一个函数getBaiduHot，解析_百度热词趋势_ 网页。
getBaiduHot <- function(url, top=30, HTMLencoding=NULL){
baiduhot <- paste0(readLines(url), collapse="")
charset <- gsub('^.+charset=([[:alnum:]-]+?)[^[:alnum:]-].+$', "\\1",
baiduhot)
if (is.null(HTMLencoding)) if (!is.null(charset)) HTMLencoding <- charset
baiduhot <- stringr::str_conv(baiduhot, HTMLencoding)
hotword <- gsub(".+?<a class=\"list-title\"[^>]+?>([^<>]+?)</a>.+?<span class=\"icon-(rise|fair|fall)\">(\\d+?)</span>.+?","\\1\t\\3\t\\2\t", baiduhot)
hotword <- enc2native(gsub("^(.+?)\t{4,}.+$","\\1", hotword))
hotword <- t(matrix(unlist(strsplit(hotword,"\t")), nrow=3))
hotword <- as.data.frame(hotword, stringsAsFactors=FALSE)
names(hotword) <- c("Keyword", "Freq", "Trend")
hotword$Freq <- as.numeric(hotword$Freq)
hotword <- hotword[order(hotword$Freq, decreasing=TRUE),]
return(hotword[1:top,])
}
hotword <- getBaiduHot("http://top.baidu.com/buzz?b=1", HTMLencoding='GBK')
knitr::kable(hotword)
# 3.2 基本图形Basic Plot
# 只要提供x和y。
echartr(hotword, Keyword, Freq, type='wordCloud') %>%
setTitle('Baidu Hot Word Top30 (realtime)', as.character(Sys.time()))
# 3.3 按数据系列着色Color by Series
# 我们希望将热词分组。定义一个series变量’Trend’。’rise’系列和’fall’系列用不同的颜色标注。
echartr(hotword, Keyword, Freq, Trend, type='wordCloud') %>%
setTitle('Baidu Hot Word Top30 (realtime)', as.character(Sys.time()))
# 3.4 带时间轴With Timeline
# 比较实时、今日和七日热词趋势。
# 首先，获取今日和七日两个榜单的网页并转为数据框，合并。
hotword$t <- 'Realtime'
hotword1 <- getBaiduHot("http://top.baidu.com/buzz?b=341&fr=topbuzz_b1",
HTMLencoding = 'GBK')
hotword1$t <- 'Today'
hotword2 <- getBaiduHot("http://top.baidu.com/buzz?b=42&c=513&fr=topbuzz_b341",
HTMLencoding = 'GBK')
hotword2$t <- '7-days'
hotword <- do.call('rbind', list(hotword, hotword1, hotword2))
hotword$t <- factor(hotword$t, levels=c('Realtime', 'Today', '7-days'))
# 然后作图。
g <- echartr(hotword, Keyword, Freq, t=t, type='wordCloud') %>%
setTitle('Baidu Hot Word Top30')
g
# 4 其他设定Futher Setup
# 接下来可以配置控件、添加标注点/标注线，以及美化成图。
# 4.1 设置主题setTheme
g %>% setTheme('dark', palette='manyeyes')
# 3 举例Showcase
# 3.1 数据准备Data Preparation
# 下面是一个虚构数据集。
data = data.frame(x=c('Collection 1', 'Collection 2', 'Intersection'),
y=c(40,50,20))
knitr::kable(data)
# 3.2 基本韦恩图Basic Venn
echartr(data, x, y, type='venn') %>%
setTitle('Venn', 'Fictious Data')
# 3 举例Showcase
# 3.1 数据准备Data Preparation
#下面是一个虚构数据集。
data = data.frame(x=rep(c('KR/min', 'Kph'), 2), y=c(6.3, 54, 7.5, 82),
z=c(rep('t1', 2), rep('t2', 2)))
knitr::kable(data)
# 3.2 单个仪表盘Single Gauge
echartr(data, x, y, type='gauge')
# 3.3 多个仪表盘Multiple Gauges
echartr(data, x, y, facet=x, type='gauge')
# 3.4 带时间轴With Timeline
echartr(data, x, y, facet=x, t=z, type='gauge')
# 3 举例Showcase
# 3.1 数据准备Data Preparation
#下面是一个虚构数据集。
data = data.frame(x=rep(c('KR/min', 'Kph'), 2), y=c(6.3, 54, 9.5, 82),
z=c(rep('t1', 2), rep('t2', 2)))
# 3.3 多个仪表盘Multiple Gauges
echartr(data, x, y, facet=x, type='gauge')
# 3.4 带时间轴With Timeline
echartr(data, x, y, facet=x, t=z, type='gauge')
# 3 举例Showcase
# 3.1 数据准备Data Preparation
# 下面是一个虚构数据集。
data = rbind(
data.frame(
lng=100+rnorm(100,0, 1)*600, lat=150+rnorm(100,0, 1)*50,
y=abs(rnorm(100,0,1))),
data.frame(
lng=rnorm(200,0, 1)*1000, lat=rnorm(200,0, 1)*800,
y=abs(rnorm(200,0,1))),
data.frame(lng=400+rnorm(20,0, 1)*300, lat=5+rnorm(20,0, 1)*10,
y=abs(rnorm(100,0,1))))
str(data)
# 3.2 基本图形Basic Plot
echartr(data,lng=lng,lat=lat,y=y,type='heatmap') %>%
setTitle("Heatmap", "Fictious Data")
# 3.2 基本图形Basic Plot
echartr(data,lng=lng,lat=lat,y=y,type='heatmap') %>%
setTitle("Heatmap", "Fictious Data")
# 3.2 基本图形Basic Plot
echartr(data,lng=lng,lat=lat,y=y,type='heatmap') %>%
setTitle("Heatmap", "Fictious Data")
# 3.2 基本图形Basic Plot
echartr(data,lng=lng,lat=lat,y=y,type='heatmap') %>%
setTitle("Heatmap", "Fictious Data")
# 3.2 基本图形Basic Plot
echartr(data,lng=lng,lat=lat,y=y,type='heatmap') %>%
setTitle("Heatmap", "Fictious Data")
dat <- read.csv('C:/Users/Think/Desktop/house.csv')
View(dat)
dat$house_name[1]
dat$house_name <- as.character(dat$house_name)
dat$house_name[1]
a <- dat$house_name[1]
strsplit(a,'\\|')
strsplit(dat$house_name,'\\|')
View(dat)
house.name <- strsplit(dat$house_name,'\\|')
house.name <- strsplit(dat$house_name,'\\|')
length(house.name)
for (n in 1:length(house.name)) {
dat[n,6] <- house.name[[n]][1]
dat[n,7] <- house.name[[n]][2]
dat[n,8] <- house.name[[n]][3]
dat[n,9] <- house.name[[n]][4]
dat[n,10] <- house.name[[n]][5]
dat[n,11] <- house.name[[n]][6]
}
View(dat)
strsplit(dat$house_flood)
strsplit(dat$house_flood[1],'\\(')
dat$house_flood[1]
dat$house_flood <- as.character(dat$house_flood)
dat$house_flood[1]
strsplit(dat$house_flood[1],'\\(')
strsplit(dat$house_flood[1],c('\\(', '\\)'))
strsplit(dat$house_flood[1],'\\(')
dat$house_flood[1]
View(dat)
dat <- read.csv('C:/Users/Think/Desktop/house.csv')
setwd('C:/Users/Administrator.USER-20161208UW/Desktop/扬州电力项目')
dat <- read.csv('C:/Users/Think/Desktop/house.csv')
temp <- data.frame(a1 = c(1,1,2,2,3,3,4,4,4))
View(temp)
if(!require(dplyr)){install.packages("dplyr")}
temp %>% group_by(a1) %>% mutate(n = count())
temp %>% group_by(a1) %>% mutate(n1 = n())
0.025/(300)^0.5
0.025/(600)^0.5
0.7^10+0.7^9*0.3*10+0.7^8*0.3^2*45+0.7^7*0.3^3*10*9*8/6+0.7^6*0.3^4*10*9*8*7/24
1^0
unif(4)

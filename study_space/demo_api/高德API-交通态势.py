# -*- coding: utf-8 -*-
"""
时间：2019-10-13
作者: zuoshao（佐少）
代码说明：高德API-搜索POI
搜索POI包括：根据用户输入的内容能够返回希望查询的交通态势情况。
"""

# ######################################################################################################################
# 高德地图之python爬取POI数据，根据用户输入的内容能够返回希望查询的交通态势情况。
# ######################################################################################################################
'''
交通态势是一类简单的HTTP接口，提供根据用户输入的内容能够返回希望查询的交通态势情况。
目前支持城市：北京，上海，广州，深圳，宁波，武汉，重庆，成都，沈阳，南京，杭州，长春，
常州，大连，东莞，福州，青岛，石家庄，天津，太原，西安，无锡，厦门，珠海，长沙，苏州，
金华，佛山，济南，泉州，嘉兴，西宁，惠州，温州，中山，合肥，乌鲁木齐，台州，绍兴，昆明。
适用场景：希望能够确定矩形、圆形或某条道路的交通态势情况，路况信息2分钟更新一次。
接口方式：
矩形区域交通态势：https://restapi.amap.com/v3/traffic/status/rectangle?parameters
圆形区域交通态势：https://restapi.amap.com/v3/traffic/status/circle?parameters
指定线路交通态势：https://restapi.amap.com/v3/traffic/status/road?parameters
'''

# ######################################################################################################################
# 矩形区域交通态势
# ######################################################################################################################

# 指定城市和关键字，拉取高德API数据~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
def get_traffic_rectangle(rectangle='116.351147,39.966309;116.357134,39.968727'):

    # 导入所需要的模块~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    from urllib.parse import quote
    import pandas as pd
    import requests

    # 高德API请求信息设置~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # cityname = '南京', keywords='东升村', page=1
    key = '5a96233309dba9e376adfdae45a02c0a'
    poi_search_url = "https://restapi.amap.com/v3/traffic/status/rectangle"
    req_url = poi_search_url + "?key=" + key + '&rectangle=' + quote(rectangle)

    # 高德API数据请求并解析~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # 访问链接后，api会回传给一个json格式的数据
    data = requests.get(req_url)
    data = data.json()

    # 如果请求返回结果为1，则提取交通态势数据~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if data['status'] == '1':

        name_list = ['expedite', 'congested', 'blocked', 'unknown', 'status', 'description']
        # 请求返回信息解析并提取相关的信息~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        df_data = pd.DataFrame(columns=name_list)

        for name in name_list:
            df_data[name] = [data['trafficinfo']['evaluation'][name]]

        df_data['description_total'] = data['trafficinfo']['description']
        df_data['infocode'] = data['infocode']

    # 没有请求结果，返回错误信息~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    else:
        print('没有返回结果！请输入正确的区域！')

    # 函数返回结果~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    return df_data

# ######################################################################################################################
# 矩形区域交通态势
# ######################################################################################################################

# 指定城市和关键字，拉取高德API数据~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
def get_traffic_circle(location='116.3057764,39.98641364', radius='1500'):

    # 导入所需要的模块~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    from urllib.parse import quote
    import pandas as pd
    import requests

    # 高德API请求信息设置~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # cityname = '南京', keywords='东升村', page=1
    key = '5a96233309dba9e376adfdae45a02c0a'
    poi_search_url = "https://restapi.amap.com/v3/traffic/status/circle"
    req_url = poi_search_url + "?key=" + key + '&location=' + quote(location) + '&radius=' + quote(radius)

    # 高德API数据请求并解析~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # 访问链接后，api会回传给一个json格式的数据
    data = requests.get(req_url)
    data = data.json()

    # 如果请求返回结果为1，则提取交通态势数据~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if data['status'] == '1':

        name_list = ['expedite', 'congested', 'blocked', 'unknown', 'status', 'description']
        # 请求返回信息解析并提取相关的信息~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        df_data = pd.DataFrame(columns=name_list)

        for name in name_list:
            df_data[name] = [data['trafficinfo']['evaluation'][name]]

        df_data['description_total'] = data['trafficinfo']['description']
        df_data['infocode'] = data['infocode']

    # 没有请求结果，返回错误信息~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    else:
        print('没有返回结果！请输入正确的区域！')

    # 函数返回结果~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    return df_data

# ######################################################################################################################
# 指定线路交通态势
# ######################################################################################################################

# 指定城市和关键字，拉取高德API数据~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
def get_traffic_road(roadname='北环大道', cityadcode='440300'):

    # 导入所需要的模块~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    from urllib.parse import quote
    import pandas as pd
    import requests

    # 高德API请求信息设置~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # cityname = '南京', keywords='东升村', page=1
    key = '5a96233309dba9e376adfdae45a02c0a'
    poi_search_url = "https://restapi.amap.com/v3/traffic/status/road"
    req_url = poi_search_url + "?key=" + key + '&name=' + quote(roadname) + '&adcode=' + quote(cityadcode)

    # 高德API数据请求并解析~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # 访问链接后，api会回传给一个json格式的数据
    data = requests.get(req_url)
    data = data.json()

    # 如果请求返回结果为1，则提取交通态势数据~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if data['status'] == '1':

        name_list = ['expedite', 'congested', 'blocked', 'unknown', 'status', 'description']
        # 请求返回信息解析并提取相关的信息~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        df_data = pd.DataFrame(columns=name_list)

        for name in name_list:
            df_data[name] = [data['trafficinfo']['evaluation'][name]]

        df_data['description_total'] = data['trafficinfo']['description']
        df_data['infocode'] = data['infocode']

    # 没有请求结果，返回错误信息~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    else:
        print('没有返回结果！请输入正确的区域！')

    # 函数返回结果~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    return df_data

# ######################################################################################################################
# 主函数
# ######################################################################################################################

# 主函数~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
if __name__ == '__main__':
    df_traffic_rectangle = get_traffic_rectangle(rectangle='116.351147,39.966309;116.357134,39.968727')
    df_traffic_circle = get_traffic_circle(location='116.3057764,39.98641364', radius='1500')
    df_traffic_road = get_traffic_road(roadname='北环大道', cityadcode='440300')



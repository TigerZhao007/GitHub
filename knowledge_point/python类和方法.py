
# ######################################################################################################################
# 类(class)
# ######################################################################################################################
'''
类(Class):用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。
类变量：类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。
数据成员：类变量或者实例变量, 用于处理类及其实例对象的相关的数据。
'''

# 类的声明及创建~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 创建类Student
class Student(object):
    "学生成绩"

    def __init__(self, name, score):
        self.name = name
        self.score = score

    def print_score(self):
        print('%s: %s' % (self.name, self.score))


# 创建Student类的对象bart
jack = Student('Bart Simpson', 59)
# 创建Student类的对象lisa
bob = Student('Lisa Simpson', 87)
# 访问类的属性
jack.print_score()
bob.print_score()
# 添加一个 'age' 属性
jack.age = 7
print("添加一个 'age' 属性：", hasattr(jack, 'age'))
# 修改 'age' 属性
jack.age = 8
print("修改 'age' 属性：", getattr(jack, 'age'))
# 删除 'age' 属性
del jack.age
print("删除 'age' 属性：", hasattr(jack, 'age'))

# 类的继承~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'''面向对象的编程带来的主要好处之一是代码的重用，实现这种重用的方法之一是通过继承机制。
通过继承创建的新类称为子类或派生类，被继承的类称为基类、父类或超类。
'''
#编写一个名为Fruit的class，执行run()方法可以直接打印
#编写Apple和Orange类时，就可以直接从Fruit类继承
class Fruit(object):
   '父类Animal'
   def run_father(self):
       print('调用父类方法...')

class Apple(Fruit):
   '子类1 Apple'
   def run_son(self):
       print('调用子类方法...')

class Orange(Fruit):
   '子类2 Orange'
   def run_son(self):
       print('调用子类方法...')
#实例化子类
apple = Apple()
orange = Orange()
#调用父类方法
apple.run_father()
orange.run_father()
#调用子类方法
apple.run_son()
orange.run_son()

# 类的重写~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'''# 如果父类方法的功能不能满足你的需求，你可以在子类重写你父类的方法
'''

class Fruit(object):
   '父类Animal'
   def run(self):
       print('调用父类方法...')

class Apple(Fruit):
   '子类1 Apple'
   def run(self):
       print('子类1 Apple 重写父类方法...')

class Orange(Fruit):
   '子类2 Orange'
   def run(self):
       print('子类2 Orange 重写父类方法...')
#实例化子类
apple = Apple()
orange = Orange()
#调用父类方法
apple.run()
orange.run()

# ######################################################################################################################
# 函数(def)
# ######################################################################################################################
'''
函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。函数能提高应用的模块性，和代码的重复利用率。
Python提供了许多内建函数，比如“print()”，也可以自己创建函数，这被叫做用户自定义函数。
'''
# 1.无参函数
# 用def定义新函数
def my_func():
    print("test...")
    return 1


# 调用函数
my_func()


# 2.有参函数
# 关键字参数、默认参数、可变参数。

# 关键字参数: 调用时指定参数的名称，且与函数声明时的参数名称一致。使用关键字参数允许函数调用时参数的顺序与声明时不一致。
def my_func1(x, y):
    print(x)
    print(y)


# 标准调用
my_func1(1, 2)


# 关键字调用
# def my_func1(y=1, x=2)

# 默认参数：在函数声明时，指定形参的默认值，调用时可不传入参数（使用默认值）。
def my_func2(x, y=1):
    print(x + y)

my_func2(2)


# 可变参数:变参数就是传入的参数个数是可变的，可以是1个、2个到任意个。
# 在参数前面加了一个*号。在函数内部，参数numbers接收到的是一个tuple。

def my_func3(*numbers):
    sum = 0
    for n in numbers:
        sum = sum + n * n
    return sum


# 函数调用
my_func3()  # 返回结果0
my_func3(1, 2)  # 返回结果5


# 关键字参数：可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。而关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。

def my_func4(x, **kw):
    print('x:', x, 'other:', kw)


# 除了必选参数x外，还接受关键字参数kw。在调用该函数时，可以只传入必选参数。
my_func4(8)

# 也可以传入任意个数的关键字参数
my_func4(8, z="66")

# ######################################################################################################################
# 导入模块(import)
# ######################################################################################################################

# 导入模块
import math
# 现在可以调用模块里包含的函数了
print("求e的n次幂：",math.exp(1))

# from…import 语句：从模块中导入一个指定的部分到当前命名空间中
# 导入模块中的特定函数
from math import exp
# 现在可以直接使用该函数了
print("求e的n次幂：",exp(1))

# from…import* 语句：导入一个模块中的所有项目。然而这种声明不该被过多地使用
from math import *



# ######################################################################################################################
# 多线程都调用一个函数，在这个函数中的一个局部变量什么情况会被修改？
# ######################################################################################################################

# 问题1：多线程都调用一个函数，在这个函数中的一个局部变量什么情况会被修改？~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# 局部变量在各个线程之间相互独立，一个线程不会改变另一个线程的临时变量。
# 全局变量在线程之间共同拥有，每个线程都可以更改，而且不能确定那个线程作了更改。
# 结论： 局部变量是不会被修改的，而全局变量则很容易就被修改了，而你却还不知道。

# 多线程时，几个线程间输出信息是交叉在一起的，但又不能区分是哪个线程输出的,就误认为是同一个线程输出的东西被改变。
# 所有线程都用cout输出内容，如何判断哪些内容是哪个线程输出的，
# 而且cout是一个全局变量，多线程同时访问需要加锁，否则会出现一些莫名其妙的情况


# 问题2：多线程中，不同线程调用同一个函数，使用的是同一份代码还是不同线程用函数的多个拷贝？为什么？~~~~~~~~~~~~~~~~~~~~~

# 多线程中，不同线程调用同一个函数，每个线程使用的是一个拷贝函数。

# 问题3：不同线程中调用函数的局部变量是否指向的都指向同一个？~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# 每个线程有自己的堆栈，所以调用函数时对函数的相关参数也是各有一份的，因此局部变量不会被其他线程修改；
# 只是全局变量需要考虑同步。

# ######################################################################################################################
# 局部变量和全局变量的区别及说明？
# ######################################################################################################################

# 全局变量：所有函数之外定义的变量
# 局部变量：函数内部定义的变量 或者代码块里的变量

# 概念1~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 1、函数内部的变量名如果第一次出现，且出现在=前面，即被视为定义了一个局部变量，
#    不管全局域中有没有该变量名，函数中使用的将是局部变量。
#   (即声明了一个新的局部变量。如果这个变量名字和全部变量名字相同，那么局部变量名字会覆盖全局变量名字。）

# 案例1==============================================================
num = 100
def func():
    newValue = 123          # 一个全新的局部变量 newValue
    print(newValue)

result = func()  # 输出局部变量newValue 即新的局部变量

# 案例2==============================================================
num = 100
def func():
    num = 123  # 声明一个全新的局部变量num，虽然名字和外界的全部变量相同 但是是新的一个变量且是局部有效的。屏蔽了外面的同名的全部变量。
    print(num)

result = func()  # 输出局部变量num=123 即新的局部变量。

# 概念2~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 2、如果局部变量用到了一个变量。该变量是全局存在的，但是局部并没有声明这么一个变量。那么此时参与运算的是全局变量。
# 但是这个参与运算是不能被赋值的，因为你赋值的时候按照python的语法那就是新生成一个局部变量，而且你在右侧使用的话，会报错。

# 案例1==============================================================
num = 100
def func():
    x = num + 200    # 使用值做参数，那么其实是copy一份num全部变量的值
    print(x)
    print(id(num))   # id值

func()               # 输出x = 300， id(num) = 1472886944  即没有局部变量声明 那么使用就是全局变量
print(id(num))       # id值 = 1472886944

# 案例2==============================================================
list = [100]
def func():
    list.append(200)  # 直接使用变量，那么得到了全局变量 操作全局变量。
    print(list)
    print(id(list))

func()                # list = 输出[100,200],   id(list) = 2720007117192
print(id(list))       # id(list) = 2720007117192

# 案例3==============================================================
# num = 100
# def func():
#     num = num + 200    # 使用值做参数，那么其实是copy一份num全部变量的值，左侧使用，这里会把报错
#     print(num)
#     print(id(num))   # id值

# 概念3~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 3、如果你想在局部变量修改全局变量。因为本身是不能的，修改后赋值的时候会出现矛盾，即涉及到赋值var = xxx 修改时报错，
# 那么会被语法解析会声明一个新的局部变量var。当然对象类型除外，你可以直接操作他的元素。

num = 100
def func():
    num = 123              # 本来你的意图是赋值给全局变量Num,但是此处会被解析为声明一个全新的局部变量num
    print(id(num))

func()                     # 输出局部变量newValue 即新的局部变量
print(id(num))

# 那么怎么办？才能在局部变量赋值修改全局变量

# 案例1==============================================================
Num = 100
def func():
    global Num       # 声明这个Num是全局的哦。如果全局变量已经有这个Num变量那就是指的它 如果全局没这个Num那就新定义一个全局变量。
    Num = 200        # 此时此刻 凡是在函数内部Num的意思始终是指全局变量。不可能有个局部变量叫Num的。
    print(Num)

func()               # 输出200
print(Num)           # 输出200 说明修改的就是全局变量啊

# 案例1==============================================================
def func():
    global Num       # 声明这个Num是全局的哦。而且恰恰是此时没有一个全局变量是Num。那么如果全局没这个Num那就新定义一个Num的全局变量。
    Num = 200
    print(Num)

func()               # 输出200
print(Num)           # 输出200 说明新定义了一个全局变量Num

# 4、总结~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 如果不是明显要局部变量和全局变量纠缠，能不纠缠就不纠缠，也就是定义变量名字的时候 要严格规范，按照开发规范来定义名字。
# 全局大写或者加上“_”开头，这是避免不必要问题的根本，消灭问题。
# 如果实在是场景需求，局部要操作修改赋值全局变量。那就使用global。









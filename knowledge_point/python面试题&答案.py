
# 1、一行代码实现1--100之和~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 利用sum()函数求和
sum(range(1, 101))  # 5050

# 2、如何在一个函数内部修改全局变量~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 函数内部global声明 修改全局变量
a = 5
def fn():
    global a
    a = 4
fn()
print(a)   # 4

# 3、列出5个python标准库~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# os：提供了不少与操作系统相关联的函数
# sys:   通常用于命令行参数
# re:   正则匹配
# math: 数学运算
# datetime:处理日期时间

# 4、字典如何删除键和合并两个字典~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# del和updata方法
dic = {"name": 'sdk', "age": 27}
del dic['name']                        # {'age': 27}

dic2 = {"name": 'zr'}
dic.update(dic2)                       # {'age': 27, 'name': 'zr'}

# 5、谈下python的GIL~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'''
GIL 是python的全局解释器锁，同一进程中假如有多个线程运行，
一个线程在运行python程序的时候会霸占python解释器（加了一把锁即GIL），
使该进程内的其他线程无法运行，等该线程运行完后其他线程才能运行。
如果线程运行过程中遇到耗时操作，则解释器锁解开，使其他线程运行。
所以在多线程中，线程的运行仍是有先后顺序的，并不是同时进行。

多进程中因为每个进程都能被系统分配资源，相当于每个进程有了一个python解释器，
所以多进程可以实现多个进程的同时运行，缺点是进程系统资源开销大
'''

# 6、python实现列表去重的方法~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 先通过集合去重，在转列表
list1 = [11, 11, 11, 12, 12, 13, 13, 13]
a = set(list1)           # {11, 12, 13}

list2 = [x for x in a]   # {11, 12, 13}
list2 = list(a)          # {11, 12, 13}

# 7、fun(*args,**kwargs)中的*args,**kwargs什么意思？~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'''
*args和*kwargs主要用于函数定义。你可以将不定数量的参数传递给一个函数。
这里不定数量的意思是：预先不知道，函数使用者会传递多少个参数给你，所以这个场景下使用这两个关键字。
'''
# *args是用来发送一个非键值对的可变参数列表给一个函数，具体案例如下：
def demo(args_f, *args_v):
    print(args_f)
    print([x for x in args_v])

demo('a', 'b', 'c', 'd', 'e')
# a
# ['b', 'c', 'd', 'e']

# **kwargs允许你将不定长度的键值对，作为参数传递给函数，
# 如果想要在一个函数里处理带名字的参数，应该使用**kwargs;具体案例如下：
def demo(**args_v):
    print([str(k) + ':' + str(v) for k, v in args_v.items()])

demo(name='sdk', age=18)   # ['name:sdk', 'age:18']

# 8、python2和python3的range（100）的区别~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# python2返回列表，python3返回迭代器，节约内存

# 9、一句话解释什么样的语言能够用装饰器?~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 函数可以作为参数传递的语言，可以使用装饰器

# 10、python内建数据类型有哪些~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 整型--int
# 布尔型--bool
# 字符串--str
# 列表--list
# 元组--tuple
# 字典--dict

# 11、简述面向对象中__new__和__init__区别~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# __init__是初始化方法，创建对象后，就立刻被默认调用了，可接收参数，如图
class Bike:
    # __init__方法自动被调用，可以创建对象接收参数。
    def __init__(self, newWheelNum, newColor):
        self.wheelNum = newWheelNum
        self.color = newColor

    def move(self):
        print('车子跑了')

# 创建对象
Bm = Bike(2, 'green')
# 只打印__init__方法执行的结果，move方法未执行
print('车的颜色为：%s'% Bm.color)         # 车的颜色为：green
print('车轮子数量为：%s'% Bm.wheelNum)    # 车轮子数量为：2










# ######################################################################################################################
# 列表
# ######################################################################################################################


# ######################################################################################################################
# 元组
# ######################################################################################################################


# ######################################################################################################################
# 字典
# ######################################################################################################################


# ######################################################################################################################
# 集合
# ######################################################################################################################
'''
集合存储的元素是无序且不能重复的，同数学中的集合一样，集合可以执行集合的并、交、差运算。
集合存储的元素无序且不能重复，因此可以做字典的键。
集合有两种不同的类型，可变集合和不可变集合，
可变集合可以添加或删除元素，但可变集合所存储的元素不能被哈希，因此不能用做字典的键；
不可变集合不能添加或删除元素，但元素是可哈希的，可以做字典的键。
集合必须用Python提供的工厂函数来声明，可变集合使用set函数，不可变集合使用frozenset函数。
https://baijiahao.baidu.com/s?id=1616476736054541454&wfr=spider&for=pc
'''

# 集合的声明及赋值~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
s1 = set('this')    # {'h', 'i', 's', 't'}
s2 = set(['java', 'python', 'r', 'c++', 'java'])   # {'c++', 'java', 'python', 'r'}

s3 = frozenset(['java', 'python', 'r', 'c++', 'java'])   # frozenset({'c++', 'java', 'python', 'r'})

# 集合会把传入的字符串拆分为单个字符作为集合的成员，
# 当传入列表时，集合会把列表内的元素作为集合成员。
# 从输出结果还可以看出，集合不允许有重复的元素

# 集合的访问~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 集合存储的元素是无序且不重复的，因此不能像列表、元组一样通过索引访问集合存储的元素。
# 对集合元素的访问可以使用成员操作符in或not in来判断某元素是否在集合中。

't' in set('this')  # True
'java' in set(['java', 'python', 'r', 'c++', 'java'])    # True

'ja' in set(['java', 'python', 'r', 'c++', 'java'])    # False

[x for x in set('this')]

# 集合的更新~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 集合内置了add、update、remove方法用于集合元素的添加、更新及移除操作。
# 另外也可以通过操作符“-=”从集合中删除子集合。
# 集合更新操作只适用于通过set创建的可变集合。

# add方法用于添加一个集合成员；
# remove方法用于删除一个集合成员；
# update用于从已存在的集合中添加一个或多个成员；
# 操作符“-=”用于删除集合中的子集合。

s1 = set(['变量', '赋值', '类', '成员'])   # {'变量', '成员', '类', '赋值'}
s2 = set(['a', 'b', 'c'])   # {'a', 'b', 'c'}

s1.add('预警')   # {'变量', '成员', '类', '赋值', '预警'}
s1.remove('类')   # {'变量', '成员', '赋值', '预警'}，如果变量不在集合中报错。
s1.discard('天')  # 如果变量在集合中，则删除对象

s1.update(s2)   # {'a', 'b', 'c', '变量', '成员', '赋值', '预警'}

# 集合的运算~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Python语言的集合类型同数学集合类型一样，也有求集合的并集、交集、差集、对称差集运算。
# 1、集合的并集运算是把两个集合合并成一个新的集合，集合合并后重复的成员被删除。
# 在Python语言中，使用符号‘|’或union函数可以执行集合的合并运算。
# 2、集合的交集运算是求两个集合的共有成员，两个集合执行交集运算后返回新的集合，该集合中的每个元素同时是两个集合中的成员。
# 在Python语言中，使用符号‘&’或intersection函数可以执行集合的交集运算。
# 3、集合的差集运算是求A集合与B集合之间的差值，A集合与B集合执行差集运算后返回新的集合，该集合的元素，只属于集合A，
# 而不属于集合B。在Python语言中，使用符号‘-’或difference函数可以执行集合的差集运算。
# 4、集合的对称差集运算是集合的异或运算，A集合与B集合执行对称差集运算后返回新的集合，该集合中的元素只能是属于A集合或B集合
# 的成员，不能同时属于A和B集合。在Python语言中，使用符号‘^’或symmetric_difference函数可以执行集合的对称差集运算。

s1 = set(['变量', '赋值', '类', '成员'])   # {'变量', '成员', '类', '赋值'}
s2 = set(['变量', '赋值', '方法'])   # {'变量', '赋值', '方法'}

s1 | s2   # 并集：{'变量', '成员', '方法', '类', '赋值'}
s1 & s2   # 交集：{'变量', '赋值'}
s1 - s2   # 差集：{'成员', '类'}
s1 ^ s2   # 差分：{'成员', '方法', '类'}

# 集合常用的内置方法~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Python提供的set、frozenset、len函数可用于集合的声明、返回集合成员个数。
s1.issubset(s2)   # s1是否是s2的子集
s1.issuperset(s2)   # s1是否是s2的超集
s1.union(s2)   # s1 | s2   # 并集：{'变量', '成员', '方法', '类', '赋值'}
s1.intersection(s2)   # s1 & s2   # 交集：{'变量', '赋值'}
s1.intersection(s2)   # 保留s1，剔除s2
s1.symmetric_difference(s2)  # 非并集
s1.copy()    # 前拷贝
s1.clear()   # 删除所有成员
s1.pop()     # 删除任意一个成员，返回该成员

# ######################################################################################################################
# number（数字）、string（字符串）、Boolean（布尔值）、None（空值）
# ######################################################################################################################






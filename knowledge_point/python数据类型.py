

# ######################################################################################################################
# 列表(list)
# ######################################################################################################################
'''列表类型是一种有序的集合。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。
列表是写在方括号 [] 之间、用逗号分隔开的元素列表。
'''

# 列表的声明与创建~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
list_a = [1, 2, 3, 4, 5, 6]
list_b = [7, 8, 9]

# 列表可以被索引和截取，列表被截取后返回一个包含所需元素的新列表
print("输出完整列表: ", list_a)
print("输出列表第一个元素:", list_a[0])
print("从第二个开始输出到第三个元素:", list_a[1:3])
print("输出从第三个元素开始的所有元素:", list_a[2:])
print("连接两次列表:", list_a * 2)
print("连接列表:", list_a + list_b)

# 列表元素的调整~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 列表中的元素是可以改变的
list_a = [1, 2, 3, 4, 5, 6]
print("变化前：", list_a)
list_a[0] = 0
list_a[2:5] = [7, 8, 9]
print("变化后：", list_a)

# append()方法：在列表末尾添加新的对象
list_a = [1, 2, 3, 4, 5, 6]
print("添加前：", list_a)
list_a.append(7)
list_a.append(8)
print("添加后：", list_a)

# del语句：删除列表元素
list_a = [1, 2, 3, 4, 5, 6]
print("删除前：", list_a)
del list_a[0]
print("删除后：", list_a)

# 列表的相关计算~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# len()方法：计算列表长度
list_a = [1, 2, 3, 4, 5, 6]
print("列表长度：", len(list_a))

# max()方法：返回列表元素最大值。min()方法：返回列表元素最小值
list_a = [1, 2, 3, 4, 5, 6]
print("列表最小值：", min(list_a))
print("列表最大值：", max(list_a))

# list()方法：将字符串转换为列表
str1 = '123456'
print("转换后：", list(str1))

# count()方法：统计某个元素在列表中出现的次数
list_a = [1, 1, 2, 3, 4, 5, 6]
print("1在list_a中出现的次数：", list_a.count(1))

# index()方法：从列表中找出某个值第一次出现的索引位置
list_a = [1, 2, 3, 4, 5, 6]
print("3第一次出现的位置：", list_a.index(3))

# insert()方法：将对象插入列表指定位置
list_a = [1, 2, 3, 4, 5, 6]
print("插入前：", list_a)
list_a.insert(0, 7)
print("插入后：", list_a)

# pop()方法：移除列表中的一个元素（默认最后一个元素），并且返回该元素的值
list_a = [1, 2, 3, 4, 5, 6]
print("默认移除最后一个元素：", list_a.pop())
print("指定移除第一个元素：", list_a.pop(0))

# 列表的排序~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# sort()方法：该方法没有返回值，但是对原列表进行排序
list_a = [1, 3, 2, 5, 4, 6]
print("排序前：", list_a)
list_a.sort()
print("升序排序：", list_a)
list_a.sort(reverse=True)
print("降序排序：", list_a)

# sorted方法：该方法有返回值，临时排序，不影响原始序列顺序
sorted(list_a)
sorted(list_a, reverse=True)

# reverse()方法：翻转列表中元素
list_a = [1, 2, 3, 4, 5, 6]
print("翻转前：", list_a)
list_a.reverse()
print("翻转后：", list_a)

# 切片方法：翻转列表中元素
list_a[::-1]

# 多层列表排序~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 对列表的第二个元素排序
list1 = [('b', 6), ('a', 1), ('c', 3), ('d', 4)]
list1.sort(key=lambda x: x[1])   # [('a', 1), ('c', 3), ('d', 4), ('b', 6)]

# 对列表的第二个元素排序后，再对第一个元素排序
list1 = [('b', 1), ('a', 1), ('c', 3), ('d', 4)]
list1.sort(key=lambda x: (x[1], x[0]))   # [('a', 1), ('b', 1), ('c', 3), ('d', 4)]

# ######################################################################################################################
# 元组(tuple)
# ######################################################################################################################
'''元组类型是不可变类型，元组使用小括号()。
'''

# 元组的声明与创建~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
tup1 = (1, 2, 3, 4, 5)
# 元组中只包含一个元素时，需要在元素后面添加逗号,否则括号会被当作运算符使用
tup2 = (50,)
tup3 = (50)
print(type(tup2))  # <class 'tuple'>
print(type(tup3))  # <class 'int'>

# 元组的访问与修改~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 访问元组:使用下标索引来访问元组中的值
tup1 = (1, 2, 3, 4, 5)
print("tup1[0]: ", tup1[0])
print("tup1[1:3]: ", tup1[1:3])

# 修改元组:元组中的元素值是不允许修改的，但可以对元组进行连接组合
tup1 = (1, 2)
tup2 = ('a', 'b')
# 创建一个新的元组
tup3 = tup1 + tup2
print(tup3)

# 删除元组：元素值是不允许删除，但可以使用del语句来删除整个元组
tup1 = (1, 2, 3, 4, 5)
print(tup1)
del tup1
print("删除后的元组 tup1: ")
print(tup1)

# 元组相关的运算~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 元组运算符：如 + 号和 * 号
tup1 = (1, 2)
tup2 = ('a', 'b')
print("连接：", tup1 + tup2)
print("复制3次：", tup1 * 3)

# len()：计算元组元素个数
tup1 = (1, 2)
print("元组长度：", len(tup1))

# max()方法: 返回元组中元素最大值。min()方法: 返回元组中元素最小值
tup1 = (1, 2)
print("元组最大值：", min(tup1))
print("元组最大值：", max(tup1))

# 元组与列表之间的转化~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# tuple()方法：将列表转换为元组
list1 = ['1', '2']
print("转换前：", list1)
tup1 = tuple(list1)
print("转换后：", tup1)
tup1 = list(list1)
print("转换后：", tup1)

# 元组的排序~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 需要先转化为列表，排序后转化为元组


# ######################################################################################################################
# 字典(dict)
# ######################################################################################################################
'''字典类型是可变类型。在同一个字典中，键(key)必须是唯一的。
字典的每个键值(key=>value)对用冒号(:)分割，每个对之间用逗号(,)分割，整个字典包括在花括号({})中。
'''

# 字典的声明与创建~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 用{}创建字典
dict1 = {"a":"1", "b":"2"}
# 用内置函数dict()
dict2 = dict(a="1", b="2")

# 字典的访问及修改~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 访问字典里的值
dict1 = {"a":"1", "b":"2"}
print("dict1['a']: ", dict1['a'])           # 如果没有会报错
print("dict1.get('a'): ", dict1.get('a'))   # 如果没有返回None
print("获取所有的key值：", dict1.keys())
print("获取所有的value值：", dict1.values())

# 增加新的键/值对
dict1 = {"a": "1", "b": "2"}
print("增加前：", dict1)
dict1['c'] = 3
print("增加后：", dict1)

# 删除字典指定元素
dict1 = {"a": "1", "b": "2"}
print("删除前：", dict1)
del dict1['a']
print("删除后：", dict1)

# 清空字典
dict1 = {"a": "1", "b": "2"}
print("清空前：", dict1)
dict1.clear()
print("清空后：", dict1)

# 字典的运算方法~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# dir()方法：查看dict所有方法: print(dir(dict))
dict1.keys()
dict1.values()

# 字典的排序方法~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# 通过key排序
d = {'a': 2, 'A': 1, 'c': 3, 'b': 2}
sorted_key_list = sorted(d)                         # 正向排序
# sorted_key_list = sorted(d,reverse=True)			# 逆向排序
print(sorted_key_list)   # ['A', 'a', 'b', 'c']     # 根据ascii码大小排序
sorted_dict = list(map(lambda x: {x: d[x]}, sorted_key_list))
print(sorted_dict)                                  # [{'A': 1}, {'a': 2}, {'b': 2}, {'c': 3}]

# 通过value排序
d = {'a': 2, 'A': 1, 'c': 3, 'b': 2}
sorted_key_list = sorted(d, key=lambda x: d[x])                     # 正向排序
sorted_key_list = sorted(d, key=lambda x: d[x], reverse=True)   	# 逆向排序
print(sorted_key_list)                                              # ['A', 'a', 'b', 'c']

sorted_dict = list(map(lambda x: {x: d[x]}, sorted_key_list))
print(sorted_dict)                                                  # [{'A': 1}, {'a': 2}, {'b': 2}, {'c': 3}]

# ######################################################################################################################
# 集合(set)
# ######################################################################################################################

# 集合概念详解~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'''
集合类型是无序的不重复元素序列。使用大括号 {} 或者 set() 函数创建集合。
注意：创建一个空集合必须用 set() 而不是 {}，因为 {} 是用来创建一个空字典。

集合存储的元素是无序且不能重复的，同数学中的集合一样，集合可以执行集合的并、交、差运算。
集合存储的元素无序且不能重复，因此可以做字典的键。
集合有两种不同的类型，可变集合和不可变集合，
可变集合可以添加或删除元素，但可变集合所存储的元素不能被哈希，因此不能用做字典的键；
不可变集合不能添加或删除元素，但元素是可哈希的，可以做字典的键。
集合必须用Python提供的工厂函数来声明，可变集合使用set函数，不可变集合使用frozenset函数。
https://baijiahao.baidu.com/s?id=1616476736054541454&wfr=spider&for=pc
'''

# 集合的声明及赋值~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
s1 = set('this')    # {'h', 'i', 's', 't'}
s2 = set(['java', 'python', 'r', 'c++', 'java'])   # {'c++', 'java', 'python', 'r'}

s3 = frozenset(['java', 'python', 'r', 'c++', 'java'])   # frozenset({'c++', 'java', 'python', 'r'})

# 集合会把传入的字符串拆分为单个字符作为集合的成员，
# 当传入列表时，集合会把列表内的元素作为集合成员。
# 从输出结果还可以看出，集合不允许有重复的元素

a = {'a', 'b', 'c'}; b = set('abc'); c = set(); d = {}
print(type(a), type(b), type(c), type(d))
a = set('python')   # 无序性
a = set('good')   # 互异性

# 集合的访问~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 集合存储的元素是无序且不重复的，因此不能像列表、元组一样通过索引访问集合存储的元素。
# 对集合元素的访问可以使用成员操作符in或not in来判断某元素是否在集合中。

't' in set('this')  # True
'java' in set(['java', 'python', 'r', 'c++', 'java'])    # True

'ja' in set(['java', 'python', 'r', 'c++', 'java'])    # False

[x for x in set('this')]

# 集合的方法~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# add()方法：为集合添加元素
a = set('good')
a.add('p')

# update()方法：给集合添加元素
a = set('good')
a.update('p')
print("添加一个元素", a)
a.update(['a', 'b', 'c'])
print("添加多个元素", a)
a.update(['H', 'e'], {'l', 'l', 'o'})
print('添加列表和集合', a)

# remove()方法：移除指定元素
s = {'P', 'y', 't', 'h', 'o', 'n'}
s.remove('t')
print("去掉t", s)

# pop()方法：随机移除元素
s = {'P', 'y', 't', 'h', 'o', 'n'}
print("随机删除元素：", s.pop())

# clear()方法：移除集合中的所有元素
s = {'P', 'y', 't', 'h', 'o', 'n'}
s.clear()
print("清空集合：", s, len(s))

# issubset()方法：判断指定集合是否为该方法参数集合的子集
A = set('abcd')
B = set('cdef')
C = set('ab')
print("C是否A子集：", C.issubset(A))

# union()方法：返回两个集合的并集，也可以用 |
print("A和B并集:", A|B)
print("A和B并集:",A.union(B))

# intersection()方法：返回集合的交集，也可以用&
print("A和B交集:", A&B)
print("A和B交集:",A.intersection(B))

# difference()方法：差集，也可以用-
print("A和B差集:", A-B)
print("A和B差集:",A.difference(B))

# 集合的更新~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 集合内置了add、update、remove方法用于集合元素的添加、更新及移除操作。
# 另外也可以通过操作符“-=”从集合中删除子集合。
# 集合更新操作只适用于通过set创建的可变集合。

# add方法用于添加一个集合成员；
# remove方法用于删除一个集合成员；
# update用于从已存在的集合中添加一个或多个成员；
# 操作符“-=”用于删除集合中的子集合。

s1 = set(['变量', '赋值', '类', '成员'])   # {'变量', '成员', '类', '赋值'}
s2 = set(['a', 'b', 'c'])   # {'a', 'b', 'c'}

s1.add('预警')   # {'变量', '成员', '类', '赋值', '预警'}
s1.remove('类')   # {'变量', '成员', '赋值', '预警'}，如果变量不在集合中报错。
s1.discard('天')  # 如果变量在集合中，则删除对象

s1.update(s2)   # {'a', 'b', 'c', '变量', '成员', '赋值', '预警'}

# 集合的运算~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Python语言的集合类型同数学集合类型一样，也有求集合的并集、交集、差集、对称差集运算。
# 1、集合的并集运算是把两个集合合并成一个新的集合，集合合并后重复的成员被删除。
# 在Python语言中，使用符号‘|’或union函数可以执行集合的合并运算。
# 2、集合的交集运算是求两个集合的共有成员，两个集合执行交集运算后返回新的集合，该集合中的每个元素同时是两个集合中的成员。
# 在Python语言中，使用符号‘&’或intersection函数可以执行集合的交集运算。
# 3、集合的差集运算是求A集合与B集合之间的差值，A集合与B集合执行差集运算后返回新的集合，该集合的元素，只属于集合A，
# 而不属于集合B。在Python语言中，使用符号‘-’或difference函数可以执行集合的差集运算。
# 4、集合的对称差集运算是集合的异或运算，A集合与B集合执行对称差集运算后返回新的集合，该集合中的元素只能是属于A集合或B集合
# 的成员，不能同时属于A和B集合。在Python语言中，使用符号‘^’或symmetric_difference函数可以执行集合的对称差集运算。

s1 = set(['变量', '赋值', '类', '成员'])   # {'变量', '成员', '类', '赋值'}
s2 = set(['变量', '赋值', '方法'])   # {'变量', '赋值', '方法'}

s1 | s2   # 并集：{'变量', '成员', '方法', '类', '赋值'}
s1 & s2   # 交集：{'变量', '赋值'}
s1 - s2   # 差集：{'成员', '类'}
s1 ^ s2   # 差分：{'成员', '方法', '类'}

# 集合常用的内置方法~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Python提供的set、frozenset、len函数可用于集合的声明、返回集合成员个数。
s1.issubset(s2)   # s1是否是s2的子集
s1.issuperset(s2)   # s1是否是s2的超集
s1.union(s2)   # s1 | s2   # 并集：{'变量', '成员', '方法', '类', '赋值'}
s1.intersection(s2)   # s1 & s2   # 交集：{'变量', '赋值'}
s1.intersection(s2)   # 保留s1，剔除s2
s1.symmetric_difference(s2)  # 非并集
s1.copy()    # 前拷贝
s1.clear()   # 删除所有成员
s1.pop()     # 删除任意一个成员，返回该成员

# ######################################################################################################################
# number（数字）、string（字符串）、Boolean（布尔值）、None（空值）
# ######################################################################################################################

# 数字类型(Number)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
''' 数字类型是不可变数据。Python3 支持 int(整数)、float(浮点数)、bool(布尔)、complex(复数)，数值类型的赋值和计算是很直观的。
'''
# int(整数)
a = 3
# float(浮点数)
b = 3.5
# bool(布尔)
c = True
# complex(复数)
d = 4+3j
print(a, b, c, d)    # 3 3.5 True (4+3j)

# 内置的 type() 函数可以用来查询变量所指的对象类型
print(type(a), type(b), type(c), type(d))   # <class 'int'> <class 'float'> <class 'bool'> <class 'complex'>

# 还可以用 isinstance 来判断， isinstance 和 type 的区别在于：
# type()不会认为子类是一种父类类型，isinstance()会认为子类是一种父类类型
print(isinstance(a, int))   # True
print(isinstance(a, float))   # False

'''
关于数值运算，可以同时为多个变量赋值，如a, b = 1, 2。一个变量可以通过赋值指向不同类型的对象。
除法包含两个运算符：/ 返回一个浮点数，// 返回一个整数。混合计算时，Python会把整型转换成为浮点数。
'''

print("Add operation: 5 + 4 = ", 5 + 4)  # 加
print("Sub operation: 5 - 4 = ", 5 - 4)  # 减
print("Mul operation: 5 * 4 = ", 5 * 4)  # 乘
print("Div operation: 5 / 4 = ", 5 / 4)  # 除，得到一个浮点数
print("Div operation: 5 // 4 = ", 5 // 4)  # 除，得到一个整数
print("Mod operation: 5 % 4 = ", 5 % 4)  # 取余
print("Pow operation: 5 ** 4 = ", 5 ** 4)   # 乘方

# 字符串类型(String)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'''Python 没有单独的字符类型，一个字符就是长度为1的字符串。字符串用单引号 ' 或双引号 " 括起来。
'''

s1 = "I love python"
s2 = 'I love python'

# 索引值以 0 为开始值，-1 为从末尾的开始位置
print("s1首字母字符：", s1[0])                       # s1首字母字符： I
print("s1末尾字母字符：",  s1[-1])                   # s1末尾字母字符： n
print("输出从第三个开始到第五个的字符:", s1[2:5])    # 输出从第三个开始到第五个的字符: lov

# 加号 + 是字符串的连接符; 星号 * 表示复制当前字符串，紧跟的数字为复制的次数
str1 = "I love python "
print("连接字符串:", str1 + "!!!")    # 连接字符串: I love python !!!
print("输出字符串两次:", str1 * 2)    # 输出字符串两次: I love python I love python

# 反斜杠 \ 转义特殊字符; 若不想让反斜杠发生转义，可以在字符串前面添加一个 r
print('I\nlove\npython')
print("反斜杠转义失效:", r'I\nlove\npython')










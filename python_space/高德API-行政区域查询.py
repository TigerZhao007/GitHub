
# -*- coding: utf-8 -*-
"""
时间：2019-10-13
作者: zuoshao（佐少）
代码说明：高德API，行政区域查询，
基于高德地图api获得某区域下属区县，以及区县地理边界坐标
 https://lbs.amap.com/api/webservice/guide/api/district
"""

# ######################################################################################################################
# 基于高德地图api和Python的区县地理边界坐标提取
# ######################################################################################################################

'''
在工作中，经常想用到类似于地热图的方式进行数据展示，无法在线进行地图关联，只好自己想办法上网找边界坐标。
高德地图的api集成了这个功能，只要设置好参数就好，按照高德地图所说，按照以下三个步骤来：
第一步，申请”Web服务API”密钥（Key）；
第二步，拼接HTTP请求URL，第一步申请的Key需作为必填参数一同发送；
第三步，接收HTTP请求返回的数据（JSON或XML格式），解析数据。

高德官网的例子也说明如何访问，
例如：http://restapi.amap.com/v3/config/district?keywords=北京&subdistrict=2&key=<用户的key>，
对访问结果进行json解析，就可以拿到坐标啦~
以福州市为例，其下属市区有5个行政区，还有8个区县，说明下边界坐标是如何输出的~
'''

# ######################################################################################################################
# 基于高德地图api获取某区域下属区域的城市代码
# ######################################################################################################################

def getSubName(address):

    '''
    基于高德地图api获取某区域下属区域的城市代码
    :param address: 请求地址，例如：福建，上海等
    :return: 该区域城市下属区域的城市代码
    '''

    # 导入所需要的模块~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    import requests

    # 高德API请求信息设置~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # address = '福州'
    url = 'http://restapi.amap.com/v3/config/district?'
    key = '5a96233309dba9e376adfdae45a02c0a'
    uri = url + 'keywords=' + address + '&key=' + key + '&subdistrict=1' + '&extensions=all'

    # 高德API数据请求并解析~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # 访问链接后，api会回传给一个json格式的数据
    temp = requests.get(uri)
    temp = temp.json()

    # 请求返回信息解析并提取相关的信息~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # districts是区域内下属区域的城市代码
    list0 = temp['districts'][0]['districts']
    output = [li['adcode'] for li in list0]

    # 函数返回结果~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    return output

# ######################################################################################################################
# 基于高德地图api获取某区域边界数据
# ######################################################################################################################

def getlnglat(address):

    '''
    基于高德地图api获取某区域边界数据
    :param address: 请求地址，例如：福建，上海等
    :return: 基于高德地图api获取某区域边界数据
    '''

    # 导入所需要的模块~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    import numpy as np
    import pandas as pd
    import requests

    # 高德API请求信息设置~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # address = '福州'
    url = 'http://restapi.amap.com/v3/config/district?'
    key = '5a96233309dba9e376adfdae45a02c0a'                       # 高德上申请的key
    uri = url + 'keywords=' + address + '&key=' + key + '&subdistrict=1' + '&extensions=all'

    # 高德API数据请求并解析~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # 访问链接后，api会回传给一个json格式的数据
    temp = requests.get(uri)
    temp = temp.json()

    # 请求返回信息解析并提取相关的信息~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # polyline是坐标，name是区域的名字
    Data = temp["districts"][0]['polyline']
    name = temp["districts"][0]['name']

    # 提取信息清理得到规范数据表~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # polyline数据是一整个纯文本数据，因此要对文本进行三次处理
    # 不同的地理块按照|分
    # 块里面的地理信息按照；分
    # 横纵坐标按照，分
    # 不同的地理块按照|分~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Data_Div1 = Data.split('|')  # 对结果进行第一次切割，按照|符号
    len_Div1 = len(Data_Div1)  # 求得第一次切割长度

    # 块里面的地理信息按照；分~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    num = 0
    len_Div2 = 0  # 求得第二次切割长度，也即整个数据的总长度
    while num < len_Div1:
        len_Div2 += len(Data_Div1[num].split(';'))
        num += 1

    # 横纵坐标按照，分~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    num = 0
    num_base = 0
    output = np.zeros((len_Div2, 5)).astype(np.float)  # 循环2次，分割；与，
    while num < len_Div1:
        temp = Data_Div1[num].split(';')
        len_temp = len(temp)
        num_temp = 0
        while num_temp < len_temp:
            output[num_temp + num_base, :2] = np.array(temp[num_temp].split(','))  # 得到横纵坐标
            output[num_temp + num_base, 2] = num_temp + 1  # 得到横纵坐标的连接顺序
            output[num_temp + num_base, 3] = num + 1  # 得到块的序号
            num_temp += 1
        num_base += len_temp
        num += 1

    # 得到规范的数据集~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    output = pd.DataFrame(output, columns=['longitude', 'latitude', 'link_order', 'module', 'city_name'])
    output['city_name'] = name

    # 函数返回结果~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    return output

# ######################################################################################################################
# 基于高德地图api获取某区域及该区域下属区域所有的边界数据
# ######################################################################################################################

def main(city='福州', tablename='gaode_city'):

    # 导入所需要的模块~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    import pandas as pd
    import sqlalchemy
    engine = sqlalchemy.create_engine("postgresql://postgres:123456@106.12.30.122:5432/test",
                                      pool_size=20, max_overflow=5)

    # 分别获取指定区域整个边界数据，以及该区域下城市代码~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    df_total = getlnglat(city)  # 得到福州整个的边界数据
    list_city = getSubName(city)  # 得到福州下属区域的城市代码

    # 添加该区域下所有下属区域边界系信息~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    for city in list_city:
        df_single = getlnglat(str(city))
        df_total = df_total.append(df_single)
        del df_single

    # 导入数据库~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    with engine.connect() as conn:
        df_total.to_sql(tablename, conn, if_exists='replace', index=False)

# 主函数~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
if __name__ == '__main__':
    main(city='福州', tablename='gaode_city')





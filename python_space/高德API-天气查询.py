# -*- coding: utf-8 -*-
"""
时间：2019-10-13
作者: zuoshao（佐少）
代码说明：高德API-搜索POI
搜索POI包括：查询目标区域当前/未来的天气情况
"""

# ######################################################################################################################
# 高德地图之python爬取POI数据，查询目标区域当前/未来的天气情况。
# ######################################################################################################################
'''
天气查询是一个简单的HTTP接口，根据用户输入的adcode，查询目标区域当前/未来的天气情况。
天气查询API服务地址：URL：https://restapi.amap.com/v3/weather/weatherInfo?parameters
请求方式：GET
请求参数：key，city（输入城市的adcode，adcode信息可参考城市编码表），
extensions（可选值：base/all；base:返回实况天气；all:返回预报天气），output
返回结果参数说明：实况天气每小时更新多次，预报天气每天更新3次，分别在8、11、18点左右更新。
由于天气数据的特殊性以及数据更新的持续性，无法确定精确的更新时间，
请以接口返回数据的reporttime字段为准
'''

# ######################################################################################################################
# 1、查询目标区域当前/未来的天气情况
# ######################################################################################################################

# 指定城市和关键字，拉取高德API数据~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
def get_weather(city='南京', extensions='base'):

    # 导入所需要的模块~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    from urllib.parse import quote
    import pandas as pd
    import requests

    # 高德API请求信息设置~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # cityname = '南京', keywords='东升村', page=1
    key = '5a96233309dba9e376adfdae45a02c0a'
    poi_search_url = "https://restapi.amap.com/v3/weather/weatherInfo"
    req_url = poi_search_url + "?key=" + key + '&city=' + quote(city) + '&extensions=' + quote(extensions)

    # 高德API数据请求并解析~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # 访问链接后，api会回传给一个json格式的数据
    data = requests.get(req_url)
    data = data.json()

    # 请求当时天气情况~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if extensions == 'base':
        data = data['lives']
        name_list = ['province', 'city', 'adcode', 'weather', 'temperature', 'winddirection', 'windpower',
                     'humidity', 'reporttime']
        # 请求返回信息解析并提取相关的信息~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        df_data = pd.DataFrame(columns=name_list)

        for name in name_list:
            df_data[name] = [li[name] for li in data]

    # 请求预测天气情况~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    else:
        data = data['forecasts']
        name_list = ['date', 'week', 'dayweather', 'nightweather', 'daytemp', 'nighttemp', 'daywind',
                     'nightwind', 'daypower', 'nightpower']
        name_list_total = ['city', 'adcode', 'province', 'reporttime']

        # 请求返回信息解析并提取相关的信息~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        df_data = pd.DataFrame(columns=name_list)

        # 预测天气
        for name in name_list:
            df_data[name] = [li[name] for li in data[0]['casts']]

        # 预测城市及时间信息
        for name in name_list_total:
            df_data[name] = data[0][name]

    # 函数返回结果~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    return df_data

# ######################################################################################################################
# 主函数
# ######################################################################################################################

# 主函数~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
if __name__ == '__main__':
    df_weather = get_weather(city='南京', extensions='base')
    df_weather = get_weather(city='南京', extensions='all')


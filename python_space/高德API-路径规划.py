# -*- coding: utf-8 -*-
"""
时间：2019-10-13
作者: zuoshao（佐少）
代码说明：高德API-搜索POI
搜索POI包括：路径规划API是一套以HTTP形式提供的步行、公交、驾车查询及行驶距离计算接口，
返回JSON 或 XML格式的查询数据，用于实现路径规划功能的开发。
（步行路径规划、公交路径规划、驾车路径规划、骑行路径规划、货车路径规划、距离测量）
"""

# ######################################################################################################################
# 提供的步行、公交、驾车查询及行驶距离计算接口
# ######################################################################################################################
'''
适用场景：无需展现地图的场景下，进行线路查询，如以线路结果页形式展现换乘方案；根据返回线路数据，自行开发线路导航。
https://lbs.amap.com/api/webservice/guide/api/direction#walk
针对步行、公交、驾车这三种路径规划的接口，如果希望能够实现批量请求，可以考虑使用批量请求接口。
https://lbs.amap.com/api/webservice/guide/api/batchrequest
由于道路/数据/算法的变更，很可能存在间隔一段时间后请求相同起终点的经纬度返回不同结果。
'''

# ######################################################################################################################
# 1、步行路径规划
# 步行路径规划 API 可以规划100KM以内的步行通勤方案，并且返回通勤方案的数据。
# ######################################################################################################################

# 指定城市和关键字，拉取高德API数据~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
def get_distance_walk(origin='116.481028,39.989643', destination='116.434446,39.90816'):

    # 导入所需要的模块~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    from urllib.parse import quote
    import pandas as pd
    import requests

    # 高德API请求信息设置~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # cityname = '南京', keywords='东升村', page=1
    key = '5a96233309dba9e376adfdae45a02c0a'
    poi_search_url = "https://restapi.amap.com/v3/direction/walking"
    req_url = poi_search_url + "?key=" + key + '&origin=' + quote(origin) + '&destination=' + quote(destination)

    # 高德API数据请求并解析~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # 访问链接后，api会回传给一个json格式的数据
    data = requests.get(req_url)
    data = data.json()

    # 请求当时天气情况~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if data['status'] == '1':
        name_list = ['instruction', 'orientation', 'road', 'duration', 'action', 'assistant_action', 'walk_type']
        # 请求返回信息解析并提取相关的信息~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        df_data = pd.DataFrame(columns=name_list)

        for name in name_list:
            df_data[name] = [li[name] for li in data['route']['paths'][0]['steps']]

        df_data['distance_total'] = data['route']['paths'][0]['distance']
        df_data['duration_total'] = data['route']['paths'][0]['duration']

    # 没有请求结果，返回错误信息~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    else:
        print('没有返回结果！请输入正确的区域！')

    # 函数返回结果~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    return df_data

# ######################################################################################################################
# 2、公交路径规划
# 公交路径规划 API 可以规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据。
# ######################################################################################################################

# 指定城市和关键字，拉取高德API数据~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
def get_distance_bus(origin='116.481028,39.989643', destination='116.434446,39.90816',
                      city='北京', cityd='北京', strategy='0', nightflag='0'):

    # 导入所需要的模块~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    from urllib.parse import quote
    import pandas as pd
    import requests

    # 高德API请求信息设置~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # cityname = '南京', keywords='东升村', page=1
    key = '5a96233309dba9e376adfdae45a02c0a'
    poi_search_url = "https://restapi.amap.com/v3/direction/transit/integrated"
    req_url = poi_search_url + '''?key=%s&origin=%s&destination=%s&city=%s&cityd=%s&strategy=%s&nightflag=%s''' \
              % (key, origin, destination, quote(city), quote(cityd), strategy, nightflag)

    # 高德API数据请求并解析~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # 访问链接后，api会回传给一个json格式的数据
    data = requests.get(req_url)
    data = data.json()

    # 请求当时天气情况~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if data['status'] == '1':
        name_list = ['origin', 'destination', 'distance', 'taxi_cost', 'transits']
        # 请求返回信息解析并提取相关的信息~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        df_data = pd.DataFrame(columns=name_list)

        for name in name_list:
            df_data[name] = [str(data['route'][name])]

        df_data['city'] = city
        df_data['cityd'] = cityd

    # 没有请求结果，返回错误信息~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    else:
        print('没有返回结果！请输入正确的区域！')

    # 函数返回结果~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    return df_data

# ######################################################################################################################
# 3、驾车路径规划
# 驾车路径规划 API 可以规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据。
# ######################################################################################################################

# 指定城市和关键字，拉取高德API数据~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
def get_distance_car(origin='116.481028,39.989643', destination='116.434446,39.90816', extensions='base', strategy='0',
                      originid='', destinationid='', waypoints='116.357483,39.907234'):

    # 导入所需要的模块~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    from urllib.parse import quote
    import pandas as pd
    import requests

    # 高德API请求信息设置~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # cityname = '南京', keywords='东升村', page=1
    key = '5a96233309dba9e376adfdae45a02c0a'
    poi_search_url = "https://restapi.amap.com/v3/direction/driving"
    req_url = poi_search_url + '''?key=%s&origin=%s&destination=%s&originid=%s&destinationid=%s&extensions=%s&strategy=%s&waypoints=%s&avoidpolygons=&avoidroad=''' \
              % (key, origin, destination, originid, destinationid, extensions, strategy, waypoints)

    # 高德API数据请求并解析~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # 访问链接后，api会回传给一个json格式的数据
    data = requests.get(req_url)
    data = data.json()

    # 请求当时天气情况~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if data['status'] == '1':
        name_list = ['origin', 'destination', 'paths']
        # 请求返回信息解析并提取相关的信息~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        df_data = pd.DataFrame(columns=name_list)

        for name in name_list:
            df_data[name] = [str(data['route'][name])]

    # 没有请求结果，返回错误信息~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    else:
        print('没有返回结果！请输入正确的区域！')

    # 函数返回结果~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    return df_data

# ######################################################################################################################
# 4、骑行路径规划
# 骑行路径规划用于规划骑行通勤方案，规划时不会考虑路况；考虑天桥、单行线、封路等情况。
# ######################################################################################################################

# 指定城市和关键字，拉取高德API数据~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
def get_distance_bicycling(origin='116.434307,39.90909', destination='116.434446,39.90816'):

    # 导入所需要的模块~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    from urllib.parse import quote
    import pandas as pd
    import requests

    # 高德API请求信息设置~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # cityname = '南京', keywords='东升村', page=1
    key = '5a96233309dba9e376adfdae45a02c0a'
    poi_search_url = "https://restapi.amap.com/v4/direction/bicycling"
    req_url = poi_search_url + '''?key=%s&origin=%s&destination=%s''' % (key, origin, destination)

    # 高德API数据请求并解析~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # 访问链接后，api会回传给一个json格式的数据
    data = requests.get(req_url)
    data = data.json()

    # 请求当时天气情况~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if data['status'] == '1':
        name_list = ['origin', 'destination', 'paths']
        # 请求返回信息解析并提取相关的信息~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        df_data = pd.DataFrame(columns=name_list)

        for name in name_list:
            df_data[name] = [str(data['data'][name])]

    # 没有请求结果，返回错误信息~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    else:
        print('没有返回结果！请输入正确的区域！')

    # 函数返回结果~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    return df_data

# ######################################################################################################################
# 5、距离测量
# 骑行路径规划用于规划骑行通勤方案，规划时不会考虑路况；考虑天桥、单行线、封路等情况。
# ######################################################################################################################

# 指定城市和关键字，拉取高德API数据~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
def get_distance(origins='116.481028,39.989643|114.481028,39.989643|115.481028,39.989643',
                           destination='114.465302,40.004717', type=1):

    # 导入所需要的模块~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    from urllib.parse import quote
    import pandas as pd
    import requests

    # 高德API请求信息设置~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # cityname = '南京', keywords='东升村', page=1
    key = '5a96233309dba9e376adfdae45a02c0a'
    poi_search_url = "https://restapi.amap.com/v3/distance"
    req_url = poi_search_url + '''?key=%s&origins=%s&destination=%s&type=%s''' % (key, origins, destination, type)

    # 高德API数据请求并解析~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # 访问链接后，api会回传给一个json格式的数据
    data = requests.get(req_url)
    data = data.json()

    # 请求当时天气情况~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if data['status'] == '1':
        name_list = ['origin_id', 'dest_id', 'distance', 'duration']
        # 请求返回信息解析并提取相关的信息~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        df_data = pd.DataFrame(columns=name_list)

        for name in name_list:
            df_data[name] = [str(li[name]) for li in data['results']]

        df_data['city'] = origins
        df_data['cityd'] = destination

    # 没有请求结果，返回错误信息~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    else:
        print('没有返回结果！请输入正确的区域！')

    # 函数返回结果~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    return df_data

# ######################################################################################################################
# 主函数
# ######################################################################################################################

# 主函数~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
if __name__ == '__main__':
    df_distance_walk = get_distance_walk(origin='116.481028,39.989643', destination='116.434446,39.90816')
    df_distance_bus = get_distance_bus(origin='116.481028,39.989643', destination='116.434446,39.90816',
                                       city='北京', cityd='北京', strategy='0', nightflag='0')
    df_distance_car = get_distance_car(origin='116.481028,39.989643', destination='116.434446,39.90816',
                                       extensions='base', strategy='0', originid='',
                                       destinationid='', waypoints='116.357483,39.907234')
    df_distance_bicycling = get_distance_bicycling(origin='116.434307,39.90909', destination='116.434446,39.90816')
    df_distance = get_distance(origins='116.481028,39.989643|114.481028,39.989643|115.481028,39.989643',
                               destination='114.465302,40.004717', type=1)


